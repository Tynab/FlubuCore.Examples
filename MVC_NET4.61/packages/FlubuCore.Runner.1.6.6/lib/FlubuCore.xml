<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlubuCore</name>
    </assembly>
    <members>
        <member name="T:FlubuCore.Context.DefaultTargets">
            <summary>
            Target to be added 
            </summary>
        </member>
        <member name="F:FlubuCore.Context.DefaultTargets.None">
            <summary>
            Noone of the tearges are added
            </summary>
        </member>
        <member name="F:FlubuCore.Context.DefaultTargets.Dotnet">
            <summary>
            Default dotnet target are added (compile...)
            </summary>
        </member>
        <member name="F:FlubuCore.Context.DefaultTargets.Core">
            <summary>
            Default dotnet core targets are added
            </summary>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String[])">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String[])">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.CreateZipPackageFromProjects(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{FlubuCore.Tasks.Packaging.PackageTask},System.String)">
            <summary>
            Create ZIP file with specified folders. Returns PackageTask to add additional properties.
            </summary>
            <param name="zipPrefix">Zip file prefix. Version will be added automatically</param>
            <param name="targetFramework">Framework to use for package folder. Folder is combined as follows {project}/bin/Release/{targetFramework}/{runtime}/publish</param>
            <param name="projects">Name of the project to add to add</param>
            <returns><see cref="T:FlubuCore.Tasks.Packaging.PackageTask"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetUnitTest(System.String[])">
            <summary>
            Runs tests using a test runner specified in the project.json / csproj.
            </summary>
            <param name="projects">The projects to test, defaults to the current directory.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetUnitTest(System.Action{FlubuCore.Tasks.NetCore.DotnetTestTask},System.String[])">
            <summary>
            Runs tests using a test runner specified in the project.json / csproj.
            </summary>
            <param name="action"></param>
            <param name="projects">The projects to test, defaults to the current directory</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetUnitTest(System.String,System.Action{FlubuCore.Tasks.NetCore.DotnetTestTask})">
            <summary>
            Runs tests using a test runner specified in the project.json / csproj.
            </summary>
            <param name="project"></param>
            <param name="action">The projects to test, defaults to the current directory</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetUnitTest(System.Action{FlubuCore.Tasks.NetCore.DotnetTestTask})">
            <summary>
            Runs tests using a test runner specified in the project.json / csproj.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetRestore(System.String[])">
            <summary>
            Restores the dependencies and tools for a given application / project.
            </summary>
            <param name="projects"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetRestore(System.Action{FlubuCore.Tasks.NetCore.DotnetRestoreTask},System.String[])">
            <summary>
            Restores the dependencies and tools for a given application / project.
            </summary>
            <param name="action"></param>
            <param name="projects"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetRestore(System.Action{FlubuCore.Tasks.NetCore.DotnetRestoreTask})">
            <summary>
            Restores the dependencies and tools for a given application / project.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetPublish(System.String[])">
            <summary>
            compiles the application, reads through its dependencies specified in the project file and publishes the resulting set of files to a directory.
            </summary>
            <param name="projects"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetPublish(System.Action{FlubuCore.Tasks.NetCore.DotnetPublishTask},System.String[])">
            <summary>
            compiles the application, reads through its dependencies specified in the project file and publishes the resulting set of files to a directory.
            </summary>
            <param name="action"></param>
            <param name="projects"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetPublish(System.Action{FlubuCore.Tasks.NetCore.DotnetPublishTask})">
            <summary>
            compiles the application, reads through its dependencies specified in the project file and publishes the resulting set of files to a directory.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetPublish(System.String,System.Action{FlubuCore.Tasks.NetCore.DotnetPublishTask})">
            <summary>
            compiles the application, reads through its dependencies specified in the project file and publishes the resulting set of files to a directory.
            </summary>
            <param name="project"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetBuild(System.String[])">
            <summary>
            Builds a project and all of its dependencies
            </summary>
            <param name="projects">The MSBuild project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetBuild(System.Action{FlubuCore.Tasks.NetCore.DotnetBuildTask},System.String[])">
            <summary>
            Builds a project and all of its dependencies
            </summary>
            <param name="action"></param>
            <param name="projects">The MSBuild project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetBuild(System.Action{FlubuCore.Tasks.NetCore.DotnetBuildTask})">
            <summary>
            Builds a project and all of its dependencies
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetBuild(System.String,System.Action{FlubuCore.Tasks.NetCore.DotnetBuildTask},System.String[])">
            <summary>
            Builds a project and all of its dependencies
            </summary>
            <param name="workingFolder"></param>
            <param name="action"></param>
            <param name="projects">The MSBuild project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetBuild(System.String,System.String,System.Action{FlubuCore.Tasks.NetCore.DotnetBuildTask})">
            <summary>
            Builds a project and all of its dependencies
            </summary>
            <param name="project">The MSBuild project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.</param>
            <param name="workingFolder"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetPack(System.String[])">
            <summary>
            command builds the project and creates NuGet packages. The result of this command is a NuGet package.
            </summary>
            <param name="projects"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetPack(System.Action{FlubuCore.Tasks.NetCore.DotnetPackTask},System.String[])">
            <summary>
            command builds the project and creates NuGet packages. The result of this command is a NuGet package.
            </summary>
            <param name="action"></param>
            <param name="projects"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetPack(System.Action{FlubuCore.Tasks.NetCore.DotnetPackTask})">
            <summary>
            command builds the project and creates NuGet packages. The result of this command is a NuGet package.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetClean(System.Action{FlubuCore.Tasks.NetCore.DotnetCleanTask},System.String[])">
            <summary>
            Cleans the output of a project.
            </summary>
            <param name="action"></param>
            <param name="projects"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetClean(System.String,System.Action{FlubuCore.Tasks.NetCore.DotnetCleanTask})">
            <summary>
            Cleans the output of a project.
            </summary>
            <param name="project"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetClean(System.Action{FlubuCore.Tasks.NetCore.DotnetCleanTask})">
            <summary>
            Cleans the output of a project.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.DotnetNugetPush(System.String,System.Action{FlubuCore.Tasks.NetCore.DotnetNugetPushTask})">
            <summary>
            Pushes the nuget package to nuget server.
            </summary>
            <param name="nugetPackagePath">Path to .nupkg file</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.UpdateDotnetVersion(System.String[],System.String[])">
            <summary>
            Updates the version in csproj / project.json file
            </summary>
            <param name="projectFiles"></param>
            <param name="additionalProps"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskExtensionsFluentInterface.BackToTarget">
            <summary>
            Moves back to target fluent interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.LinuxTasks">
            <summary>
            Task specific for Linux operating system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.ExecuteDotnetTask(System.String)">
            <summary>
            Executes specified dotnet command.
            </summary>
            <param name="command">Commdand to execute</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.ExecuteDotnetTask(FlubuCore.Tasks.NetCore.StandardDotnetCommands)">
            <summary>
            Executes specified dotnet command.
            </summary>
            <param name="command">Commdand to execute.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.UpdateNetCoreVersionTask(System.String[])">
            <summary>
            Updates the version in csproj / project.json file
            </summary>
            <param name="files">The project files to update.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Restore(System.String,System.String)">
            <summary>
            Restores the dependencies and tools for a given application / project.
            </summary>
            <param name="projectName"></param>
            <param name="workingFolder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Publish(System.String,System.String,System.String)">
            <summary>
            compiles the application, reads through its dependencies specified in the project file and publishes the resulting set of files to a directory.
            </summary>
            <param name="projectName"></param>
            <param name="workingFolder"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Build(System.String,System.String)">
            <summary>
            Builds a project and all of its dependencies
            </summary>
            <param name="projectName"></param>
            <param name="workingFolder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Pack">
            <summary>
            command builds the project and creates NuGet packages. The result of this command is a NuGet package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Test">
            <summary>
            Runs tests using a test runner specified in the project.json / csproj.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.Clean">
            <summary>
            Cleans the output of a project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface.NugetPush(System.String)">
            <summary>
            Pushes the nuget package to nuget server.
            </summary>
            <param name="packagePath">Path to .nupkg file</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.CreateWebsiteTask">
            <summary>
            Task creates new web site in iis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.CreateWebApplicationTask(System.String)">
            <summary>
            Task created new web application on the specified web site in iis
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.CreateAppPoolTask(System.String)">
            <summary>
            Task creates new application pool in iis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.DeleteAppPoolTask(System.String)">
            <summary>
            Task delentes specified Application pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.ControlAppPoolTask(System.String,FlubuCore.Tasks.Iis.ControlApplicationPoolAction)">
            <summary>
            /Task for controlling the application pool (start, stop)
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IIisTaskFluentInterface.AddWebsiteBindingTask">
            <summary>
            Task adds binding to existing web site.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SystemCtlTask(System.String,System.String)">
            <summary>
            Run's system ctl.
            </summary>
            <param name="command"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCommand(System.String,System.String,System.String)">
            <summary>
            Run specified command on the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCommand(System.String,System.String)">
            <summary>
            Run specified command on the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCopy(System.String,System.String,System.String)">
            <summary>
            Copy projects/files to the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ILinuxTaskFluentInterface.SshCopy(System.String,System.String)">
            <summary>
            Copy projects/files to the remote host.
            </summary>
            <param name="host"></param>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DependsOn(System.String[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DependsOn(FlubuCore.Targeting.ITarget[])">
            <summary>
                Specifies targets on which this target depends on. Execution of dependant targets is synchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DependsOnAsync(FlubuCore.Targeting.ITarget[])">
            <summary>
                Specifies targets on which this target depends on. Execution of dependant targets is asynchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DependsOn(FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DependsOnAsync(FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface[])">
            <summary>
            Specifies targets on which this target depends on. Execution of dependant targets is asynchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.Do(System.Action{FlubuCore.Context.ITaskContextInternal})">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.Do``1(System.Action{FlubuCore.Context.ITaskContextInternal,``0},``0)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.Do``2(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1},``0,``1)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.Do``3(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2},``0,``1,``2)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.Do``4(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.Do``5(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DoAsync(System.Action{FlubuCore.Context.ITaskContextInternal})">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DoAsync``1(System.Action{FlubuCore.Context.ITaskContextInternal,``0},``0)">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DoAsync``2(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1},``0,``1)">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DoAsync``3(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2},``0,``1,``2)">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DoAsync``4(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.DoAsync``5(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.SetAsDefault">
            <summary>
                Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.SetAsHidden">
            <summary>
                Sets the target as hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.AddTask(FlubuCore.Tasks.ITask[])">
            <summary>
            Add multiple tasks to the target.
            </summary>
            <param name="tasks">Array of <see cref="T:FlubuCore.Tasks.ITask"/> to add.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.AddTask(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the (core) task to the target.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.AddCoreTask(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the .net core task to the target.
            </summary>
            <param name="task">The .net core task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.AddTaskAsync(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the (core) task to the target that will be run asynchronous with other tasks.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.AddCoreTaskAsync(System.Func{FlubuCore.Context.FluentInterface.Interfaces.ICoreTaskFluentInterface,FlubuCore.Tasks.ITask})">
            <summary>
            Add's the .net core task to the target that will be run asynchronous with other tasks.
            </summary>
            <param name="task">The task to be added</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.TaskExtensions">
            <summary>
            Task extensions for various .net (core) tasks(Fluent interface).
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITargetFluentInterface.CoreTaskExtensions">
            <summary>
            Task extensions for various .net core tasks(Fluent interface).
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskExtensionsFluentInterface.GenerateCommonAssemblyInfo(System.Action{FlubuCore.Tasks.Versioning.GenerateCommonAssemblyInfoTask})">
            <summary>
            Generate's common assembly info file. Information is taken from <see cref="T:FlubuCore.Context.BuildProps"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskExtensionsFluentInterface.RunMultiProgram(System.String[])">
            <summary>
            Run's multriple programs
            </summary>
            <param name="programs"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskExtensionsFluentInterface.RunProgram(System.String,System.String,System.String[])">
            <summary>
            Run specified program.
            </summary>
            <param name="program"></param>
            <param name="workingFolder"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskExtensionsFluentInterface.RunProgram(System.String,System.String,System.Action{FlubuCore.Tasks.Process.IRunProgramTask})">
            <summary>
            Run specified program.
            </summary>
            <param name="program"></param>
            <param name="workingFolder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskExtensionsFluentInterface.BackToTarget">
            <summary>
             Moves back to target fluent interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.RunProgramTask(System.String)">
            <summary>
            Task runs the specified program.
            </summary>
            <param name="programToExecute">The program to execute.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CopyDirectoryStructureTask(System.String,System.String,System.Boolean)">
            <summary>
             Copies a directory tree from the source to the destination.
            </summary>
            <param name="sourcePath">Path of the source directory</param>
            <param name="destinationPath">Path where directory will be copied to.</param>
            <param name="overwriteExisting">If <c>True</c> directory on the destination path is overwriten if it exists. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.PublishNuGetPackageTask(System.String,System.String)">
            <summary>
            Creates Nupkg file from nuspec file and publises it to the nuget server.
            </summary>
            <param name="packageId">Id of the nuget package.</param>
            <param name="nuspecFileName">Path to the nuspec file.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.PackageTask(System.String)">
            <summary>
            Task Packages specified directories and files into specified directory or zip file.
            </summary>
            <param name="destinationRootDir">The destination directory where the package will be created.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CompileSolutionTask">
            <summary>
            Task compiles the solution with MSBuild. Solution and build configuration is retrived from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CompileSolutionTask(System.String,System.String)">
            <summary>
            Task compiles specified solution with MsBuild
            </summary>
            <param name="solutionFileName">The file name of the solution to be compiled</param>
            <param name="buildConfiguration">The build configuration solution will be compiled in(Release, Debug...)</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.LoadSolutionTask">
            <summary>
            Task load's solution information to the <see cref="T:FlubuCore.Context.TaskContextSession"/> solution file name is retieved from <see cref="T:FlubuCore.Context.TaskContextSession"/>
            </summary>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.LoadSolutionTask(System.String)">
            <summary>
            Task load's specified solution information to the <see cref="T:FlubuCore.Context.TaskContextSession"/>
            </summary>
            <param name="solutionFileName">The solution file name of the solution to be loaded.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CoverageReportTask(System.String[])">
            <summary>
            Runs the cooverage report generator tool
            </summary>
            <param name="inputFiles"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CleanOutputTask">
            <summary>
            Cleans the output of all projects in the solution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskForNunitV3(System.String[])">
            <summary>
            Task runs tests that are in specified project.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskForNunitV2(System.String[])">
            <summary>
            Task runs tests that are in specified project.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskByProjectName(System.String[])">
            <summary>
            Task runs tests that are in specified project.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.NUnitTaskByAssemblyName(System.String[])">
            <summary>
            Task runs tests that are in specified assembly..
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.UpdateJsonFileTask(System.String)">
            <summary>
            Update's specified json.
            </summary>
            <param name="fileName">File name of the json to be updated.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.FetchBuildVersionFromFileTask">
            <summary>
            Task Fetches build version from file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.FetchVersionFromExternalSourceTask">
            <summary>
            Task fetched build version from external soruce(appveryor).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.GenerateCommonAssemblyInfoTask">
            <summary>
            Generate's common assembly info file. Information is taken from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.GenerateCommonAssemblyInfoTask(System.Version)">
            <summary>
            Task generate's common assembly info file. Information is taken from <see cref="T:FlubuCore.Context.IBuildPropertiesSession"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.OpenCoverToCoberturaTask(System.String,System.String)">
            <summary>
            Task runs open cover to cobertuta tool.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.OpenCoverTask" -->
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.UnzipTask(System.String,System.String)">
            <summary>
            Task unzip specified zip to specified locattion.
            </summary>
            <param name="zip">Zip file to be unziped</param>
            <param name="destionation">Destination path where zip content will be unziped.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.IisTasks">
            <summary>
            Internet information service specific tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CopyFileTask(System.String,System.String,System.Boolean)">
            <summary>
            Task copies file to specified location.
            </summary>
            <param name="sourceFileName">File to be copied</param>
            <param name="destinationFileName"></param>
            <param name="overwrite">If <c>true</c> file is owerwriten if exists. Otherwise not</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.CreateDirectoryTask(System.String,System.Boolean)">
            <summary>
            /Task creates directory.
            </summary>
            <param name="directoryPath"></param>
            <param name="forceRecreate">If <c>true</c> directory is deleted if it exists and then created again.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.DeleteDirectoryTask(System.String,System.Boolean)">
            <summary>
            Task deletes directory.
            </summary>
            <param name="directoryPath">Path of the directoy to be deleted</param>
            <param name="failIfNotExists">If <c>true</c> task fails if excetpion. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.DeleteFilesTask(System.String,System.String,System.Boolean)">
            <summary>
            Task deletes files
            </summary>
            <param name="directoryPath">Path of the directoy files to be deleted in</param>
            <param name="filePattern">The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters but doesnt support regular expressions.</param>
            <param name="recursive">If <c>true</c> files in subdirectories is searched. Otherwise only in root directory.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.MergeConfigurationTask(System.String,System.String[])">
            <summary>
            Merges multiple configuration files into one.
            </summary>
            <param name="outFile"></param>
            <param name="sourceFiles"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.ReplaceTextTask(System.String,System.Tuple{System.String,System.String}[])">
            <summary>
            Task Replaces text in file.
            </summary>
            <param name="sourceFile">File path.</param>
            <param name="tokens">Fist paramteter text to be replaced. Second parameter text to be replaced with</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.ITaskFluentInterface.UpdateXmlFileTask(System.String)">
            <summary>
            Task updates xml. Xml elements can be added, updated or deleted.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.UploadPackageTask(System.String,System.String)">
            <summary>
            Upload's sprecified packages to flubu web api server.
            </summary>
            <param name="directoryPath">The relative or absolute path to the directory where packages are searched.</param>
            <param name="packageSearchPattern">The search string to match against the names of files(packages). This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.ExecuteScriptTask(System.String,System.String)">
            <summary>
            Executes specified flubu scrip on flubu web api server.
            </summary>
            <param name="mainCommand">Command to be executed.</param>
            <param name="scriptFilePath">Location to the flubu script on the flubu web api server.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.GetTokenTask(System.String,System.String)">
            <summary>
            Get's the token that can access flubu web api server.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.DeletePackagesTask">
            <summary>
            Deletes all packages(cleans directory on flubu web api server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.Interfaces.IWebApiFluentInterface.UploadScriptTask(System.String)">
            <summary>
            Uploads flubu script to flubu web api server.
            </summary>
            <param name="scriptFilePath"> The relative or absolute path to the flubu script to be uploaded to web api server.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskExtensions.Core.CoreTaskExtensionsFluentInterface.BackToTarget">
            <summary>
            Moves back to target fluent interface. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CopyDirectoryStructureTask(System.String,System.String,System.Boolean)">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.CopyDirectoryStructureTask(System.String,System.String,System.Boolean)" /> class
                using a specified source and destination path and an indicator whether to overwrite existing files.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskForNunitV3(System.String[])">
            <inheritdoc />
            <summary>
            Initializes NunitTask with default command line options for nunit V3.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskForNunitV2(System.String[])">
            <inheritdoc />
            <summary>
            Initializes NunitTask with default command line options for nunit V2.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskByProjectName(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.NUnitTaskByAssemblyName(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:FlubuCore.Context.FluentInterface.TaskFluentInterface.ReplaceTokensTask(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="P:FlubuCore.Context.IBuildPropertiesContext.Properties">
            <summary>
            Build properties stored in session
            </summary>
        </member>
        <member name="P:FlubuCore.Context.IBuildPropertiesSession.Item(System.String)">
            <summary>
            Property indexer.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Get``1(System.String)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.TryGet``1(System.String)">
            <summary>
            Get's the property by property name. If it doesn't exist null is returned.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Get``1(System.String,``0)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <param name="defaultValue">Returned value if property is not set in session.</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Has(System.String)">
            <summary>
            Checks by property name if property is stored in session.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.EnumerateProperties">
            <summary>
            Enumerates all properties
            </summary>
            <returns>Enumareted properties.</returns>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Set``1(System.String,``0)">
            <summary>
            Set's property in session.
            </summary>
            <typeparam name="T">Type of property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The propery value.</param>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Clear">
            <summary>
            Clear all properties from session.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.IBuildPropertiesSession.Remove(System.String)">
            <summary>
            Removes the specified property from session.
            </summary>
            <param name="propertyName">The name of property to be removed.</param>
        </member>
        <member name="M:FlubuCore.Context.ITaskContext.CoreTasks">
            <summary>
            Fluent interface for creating .net core tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.ITaskContext.Tasks">
            <summary>
            Fluent interface for creating tasks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.ITaskContext.CreateTarget(System.String)">
            <summary>
            Fluent interface for target creation. It creates The target and Add's it to the TargetTree.
            </summary>
            <param name="name">The target name.</param>
            <returns></returns>
        </member>
        <member name="P:FlubuCore.Context.ITaskContextInternal.TargetTree">
            <summary>
            The <see cref="P:FlubuCore.Context.ITaskContextInternal.TargetTree"/>
            </summary>
        </member>
        <member name="T:FlubuCore.Context.TaskContextSession">
            <summary>
            Used for storing task context properties into session.
            </summary>
        </member>
        <member name="F:FlubuCore.Context.TaskContextSession._properties">
            <summary>
            name value dictionary used for storing differend task context properties.
            </summary>
        </member>
        <member name="P:FlubuCore.Context.TaskContextSession.Item(System.String)">
            <summary>
            Property indexer.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.TaskContextSession.Get``1(System.String)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.TaskContextSession.Get``1(System.String,``0)">
            <summary>
            Get's the property by property name.
            </summary>
            <typeparam name="T">Type of returned property</typeparam>
            <param name="propertyName">The property name</param>
            <param name="defaultValue">Returned value if property is not set in session.</param>
            <returns>The property</returns>
        </member>
        <member name="M:FlubuCore.Context.TaskContextSession.Has(System.String)">
            <summary>
            Checks by property name if property is stored in session.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Context.TaskContextSession.EnumerateProperties">
            <summary>
            Enumerates all properties
            </summary>
            <returns>Enumareted properties.</returns>
        </member>
        <member name="M:FlubuCore.Context.TaskContextSession.Set``1(System.String,``0)">
            <summary>
            Set's property in session.
            </summary>
            <typeparam name="T">Type of property.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The propery value.</param>
        </member>
        <member name="M:FlubuCore.Context.TaskContextSession.Clear">
            <summary>
            Clear all properties from session.
            </summary>
        </member>
        <member name="M:FlubuCore.Context.TaskContextSession.Remove(System.String)">
            <summary>
            Removes the specified property from session.
            </summary>
            <param name="propertyName">The name of property to be removed.</param>
        </member>
        <member name="M:FlubuCore.Context.TaskSession.Complete">
            <summary>
                Marks the runner as having completed its work successfully. This is the last method
                that should be called on the runner before it gets disposed.
            </summary>
        </member>
        <member name="P:FlubuCore.IO.FullPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="P:FlubuCore.IO.LocalPath.ParentPath">
            <summary>
            Gets the path that is a parent to the current path in this object.
            </summary>
            <value>The parent path.</value>
        </member>
        <member name="T:FlubuCore.IO.Wrappers.IFileWrapper">
            <summary>
            Wrapper interface for <see cref="T:System.IO.File"/>
            </summary>
        </member>
        <member name="M:FlubuCore.Packaging.CopyProcessor.AddSingleFileTransformation(System.String,FlubuCore.IO.LocalPath)">
            <summary>
            Defines a transformation for <see cref="T:FlubuCore.Packaging.SingleFileSource"/> which copies the file to the destination
            and renames the file in the process.
            </summary>
            <param name="sourceId">ID of the <see cref="T:FlubuCore.Packaging.SingleFileSource"/>.</param>
            <param name="destinationFileName">The destination directory and file name (local path).</param>
            <returns>This same instance of the <see cref="T:FlubuCore.Packaging.CopyProcessor"/>.</returns>
        </member>
        <member name="M:FlubuCore.Packaging.CopyProcessor.AddFileTransformation(System.String,System.String)">
            <summary>
            Replace all occurrences of source file name with newFileName.
            </summary>
            <param name="fileName">Source file name to replace.</param>
            <param name="newFileName">Replace with new name.</param>
            <returns>Returns <see cref="T:FlubuCore.Packaging.CopyProcessor"/>.</returns>
        </member>
        <member name="M:FlubuCore.Packaging.NegativeFilter.#ctor(FlubuCore.Packaging.IFileFilter)">
            <summary>
            Neagatives given filter.
            </summary>
            <param name="filter">Filter to be negatived.</param>
        </member>
        <member name="M:FlubuCore.Packaging.RegexFileFilter.#ctor(System.String)">
            <summary>
            Filter files by regex expression.
            </summary>
            <param name="filterRegexValue">The regex expression.</param>
        </member>
        <member name="T:FlubuCore.Scripting.BuildScript">
            <summary>
            Build script template.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.CommandArguments.TreatUnknownTargetAsException">
            <summary>
            If <c>true</c> specified target is unknown flubu treat this as exception. Otherwise help target is runned.
            </summary>
        </member>
        <member name="P:FlubuCore.Scripting.CommandArguments.RethrowOnException">
            <summary>
            If <c>true</c> flubu rethrows exception when occures. Otherwise status code is returned. 
            </summary>
        </member>
        <member name="P:FlubuCore.Services.FlubuEnviroment.SystemRootDir">
            <summary>
            Gets the Windows system root directory path.
            </summary>
            <value>The Windows system root directory path.</value>
        </member>
        <member name="T:FlubuCore.Services.IFlubuEnviromentService">
            <summary>
            An abstraction layer for various <see cref="!:FlubuEnvironment"/> utility methods.
            </summary>
        </member>
        <member name="M:FlubuCore.Services.IFlubuEnviromentService.ListAvailableMSBuildToolsVersions">
            <summary>
            Returns a sorted dictionary of all MSBuild tools versions that are available on the system.
            </summary>
            <remarks>The method scans through the registry (<c>HKLM\SOFTWARE\Microsoft\MSBuild\ToolsVersions</c> path)
            to find the available tools versions.</remarks>
            <returns>A sorted dictionary whose keys are tools versions (2.0, 3.5, 4.0, 12.0 etc.) and values are paths to the
            tools directories (and NOT the <c>MSBuild.exe</c> itself!). The entries are sorted ascendingly by version numbers.</returns>
        </member>
        <member name="P:FlubuCore.Targeting.ITarget.IsHidden">
            <summary>
                Gets a value indicating whether this target is hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DependsOn(System.String[])">
            <summary>
                Specifies targets on which this target depends on and execute then Synchronus.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DependsOnAsync(System.String[])">
            <summary>
                Specifies targets on which this target depends on and execute dependencies asynchronus
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DependsOn(FlubuCore.Targeting.ITarget[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DependsOnAsync(FlubuCore.Targeting.ITarget[])">
            <summary>
                Specifies targets on which this target depends on and execute dependencies asynchronus.
            </summary>
            <param name="targets">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.Do(System.Action{FlubuCore.Context.ITaskContextInternal})">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.Do``1(System.Action{FlubuCore.Context.ITaskContextInternal,``0},``0)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.Do``2(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1},``0,``1)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.Do``3(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2},``0,``1,``2)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.Do``4(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.Do``5(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DoAsync(System.Action{FlubuCore.Context.ITaskContextInternal})">
            <summary>
            Execute custom code in script asynchronous.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DoAsync``1(System.Action{FlubuCore.Context.ITaskContextInternal,``0},``0)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DoAsync``2(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1},``0,``1)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DoAsync``3(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2},``0,``1,``2)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DoAsync``4(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.DoAsync``5(System.Action{FlubuCore.Context.ITaskContextInternal,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            Execute custom code in script.
            </summary>
            <param name="targetAction">Action to execute.</param>
            <returns>This target.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.OverrideDo(System.Action{FlubuCore.Context.ITaskContextInternal})">
            <summary>
                Overrides any previously specified target action with the new one.
            </summary>
            <param name="targetAction">The new target action to perform.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
            <remarks>The method works even if no target action was specified before.</remarks>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.SetAsDefault">
            <summary>
                Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.SetDescription(System.String)">
            <summary>
            Set's the description of the target.
            Desciption will be displayed in help.
            </summary>
            <param name="description">The description.</param>
            <returns>this target</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.SetAsHidden">
            <summary>
                Sets the target as hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.ITarget.AddTask(FlubuCore.Tasks.ITask[])">
            <summary>
            Add's the task to the target.
            </summary>
            <param name="task">The task to be added</param>
        </member>
        <member name="P:FlubuCore.Targeting.Target.Description">
            <summary>
                Gets the description of the target.
            </summary>
            <value>The description of the target.</value>
        </member>
        <member name="P:FlubuCore.Targeting.Target.IsHidden">
            <summary>
                Gets a value indicating whether this target is hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <value><c>true</c> if this target is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FlubuCore.Targeting.Target.DependsOn(System.String[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.DependsOnAsync(System.String[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targetNames">The dependency target names.</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.SetAsDefault">
            <summary>
                Sets the target as the default target for the runner.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.SetDescription(System.String)">
            <summary>
                Set's the description of the target,
            </summary>
            <param name="description">The description</param>
            <returns>this target</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.SetAsHidden">
            <summary>
                Sets the target as hidden. Hidden targets will not be
                visible in the list of targets displayed to the user as help.
            </summary>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" />.</returns>
        </member>
        <member name="M:FlubuCore.Targeting.Target.DependsOn(FlubuCore.Targeting.ITarget[])">
            <summary>
                Specifies targets on which this target depends on.
            </summary>
            <param name="targets">The dependency targets</param>
            <returns>This same instance of <see cref="T:FlubuCore.Targeting.ITarget" /></returns>
        </member>
        <member name="P:FlubuCore.Targeting.TargetTree.DefaultTarget">
            <summary>
                Gets the default target for this runner.
            </summary>
            <remarks>
                The default target is the one which will be executed if
                the target is not specified in the command line.
            </remarks>
            <value>The default target.</value>
        </member>
        <member name="M:FlubuCore.Targeting.TargetTree.HasTarget(System.String)">
            <summary>
                Determines whether the specified target exists.
            </summary>
            <param name="targetName">Name of the target.</param>
            <returns>
                <c>true</c> if the specified target exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlubuCore.Targeting.TargetTree.TargetHelp(FlubuCore.Context.ITaskContextInternal)">
            <summary>
                The target for displaying help in the command line.
            </summary>
            <param name="context">The task context.</param>
        </member>
        <member name="T:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask">
            <summary>
                Copies a directory tree from the source to the destination.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask" /> class
                using a specified source and destination path and an indicator whether to overwrite existing files.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="overwriteExisting">if set to <c>true</c> the task will overwrite existing destination files.</param>
        </member>
        <member name="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.CopiedFilesList">
            <summary>
                Gets the list of all destination files that were copied.
            </summary>
            <value>The list of all destination files that were copied.</value>
        </member>
        <member name="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern">
            <summary>
                Gets or sets the exclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will not be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
            <value>The exclusion pattern.</value>
        </member>
        <member name="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern">
            <summary>
                Gets or sets the inclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
            <value>The inclusion pattern.</value>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.SetExclusionPattern(System.String)">
            <summary>
                Sets the exclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will not be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.ExclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.SetInclusionPattern(System.String)">
            <summary>
                sets the inclusion regular expression pattern for files.
            </summary>
            <remarks>
                All files whose paths match this regular expression
                will be copied. If the <see cref="P:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.InclusionPattern" /> is <c>null</c>, it will be ignored.
            </remarks>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyDirectoryStructureTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
                Internal task execution code.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:FlubuCore.Tasks.FileSystem.CopyFileTask">
            <summary>
            Copies file to specified soruce
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CopyFileTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Copies file to specified destination location.
            </summary>
            <param name="sourceFileName">Path of file to be copied. </param>
            <param name="destinationFileName">Destination location of the file to be copied.</param>
            <param name="overwrite">if <c>true</c> file on the destionation location is overwriren if it exists. Otherwise not.</param>
        </member>
        <member name="T:FlubuCore.Tasks.FileSystem.CreateDirectoryTask">
            <summary>
            Task creates directroy
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.CreateDirectoryTask.#ctor(System.String,System.Boolean)">
            <summary>
            Task creates directory at the given location.
            </summary>
            <param name="directoryPath"></param>
            <param name="forceRecreate">If <c>true</c> directory is deleted if it exists and then created again.</param>
        </member>
        <member name="M:FlubuCore.Tasks.FileSystem.DeleteFilesTask.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="directoryPath"></param>
            <param name="filePattern">The search string to match against the names of files in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters but doesnt support regular expressions.</param>
            <param name="recursive"></param>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.ExecuteFlubuScriptTask.AddCommands(System.String[])">
            <summary>
            Adds remaining flubu commands.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.UploadPackageTask.PackageSearchPattern(System.String)">
            <summary>
            The search string to match against the names of files(packages). This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
            </summary>
            <param name="packageSearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.WebApiBaseTask`2.SetWebApiBaseUrl(System.String)">
            <summary>
            Set's web api base url on web api client.
            </summary>
            <param name="webApiUrl"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.WebApiBaseTask`2.SetTimeout(System.TimeSpan)">
            <summary>
            Set's timeout on web api client.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.FlubuWebApi.WebApiBaseTask`2.SetToken(System.String)">
            <summary>
            Set's token on web api client.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.ControlApplicationPoolAction.Start">
            <summary>
            Start the application pool.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.ControlApplicationPoolAction.Stop">
            <summary>
            Stop the application pool.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.ControlApplicationPoolAction.Recycle">
            <summary>
            Recycle the application pool.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateApplicationPoolMode.FailIfAlreadyExists">
            <summary>
            The task should fail if the application pool already exists.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateApplicationPoolMode.UpdateIfExists">
            <summary>
            If the application pool already exists, it should be updated.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateApplicationPoolMode.DoNothingIfExists">
            <summary>
            If the application pool already exists, the task should do nothing.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebApplicationMode.FailIfAlreadyExists">
            <summary>
            If the application already exists, the task should fail.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebApplicationMode.UpdateIfExists">
            <summary>
            If the application already exists, it should be updated.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebApplicationMode.DoNothingIfExists">
            <summary>
            If the application already exists, the task should do nothing.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebApplicationTask.WebsiteName(System.String)">
            <summary>
            Gets or sets the Name of the website that the web application is added too. By default it is "Default Web Site"
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._webSiteName">
            <summary>
            Name of the website
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._bindingProtocol">
            <summary>
            The binding protocol. Http or https.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._port">
            <summary>
            Port of the web application
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Iis.CreateWebsiteTask._physicalPath">
            <summary>
            Physical path to application.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
            Creates or updated the web site.
            </summary>
            <param name="context">The task context</param>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.Validate">
            <summary>
            Validates Ii7CreateWebSiteTask properties.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteBindingProtocol.BindingProtocol(System.String)">
            <summary>
            Sets the binding protocol. Http or https.
            </summary>
            <param name="value">The binding protocol. Supported values http and https.</param>
            <returns>new instance of <see cref="T:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteProtocol"/></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteProtocol.Port(System.Int32)">
            <summary>
            Sets the port of the web site.
            </summary>
            <param name="value">The port</param>
            <returns>New instance of <see cref="T:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsitePhysicalPath"/></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsitePhysicalPath.PhysicalPath(System.String)">
            <summary>
            Sets the physical path to the web site.
            </summary>
            <param name="value">The physical path.</param>
            <returns>The iI7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IisTaskBase.AddMimeTypes(Microsoft.Web.Administration.Configuration,System.Collections.Generic.IList{FlubuCore.Tasks.Iis.MimeType})">
            <summary>
            Adds mime types.
            </summary>
            <param name="config">Config of the website or web application</param>
            <param name="mimeTypes">List of mime types to be added</param>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IisTaskBase.WebsiteExists(Microsoft.Web.Administration.ServerManager,System.String)">
            <summary>
            Checks if web site exists in the iis.
            </summary>
            <param name="serverManager">the server manager.</param>
            <param name="siteName">Site name to be checked if it exists.</param>
            <returns>True if web site exists in iis.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.AddBinding(System.String)">
            <summary>
            Add's binding.
            </summary>
            <param name="protocol">Binding protocol</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.SiteName(System.String)">
            <summary>
            Web site name binding is added to.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.CertificateStore(System.String)">
            <summary>
            Certificate store.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.IAddWebsiteBindingTask.CertificateHash(System.String)">
            <summary>
            Hash of the certificate.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.ICreateWebApplicationTask.ApplicationPoolName(System.String)">
            <summary>
            Name of the application pool application will be controoler by.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.ICreateWebApplicationTask.WebsiteName(System.String)">
            <summary>
            Web site name web application will be added to.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.Interfaces.ICreateWebApplicationTask.AddMimeType(System.String[])">
            <summary>
            Mime types to be added.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IControlAppPoolTask.FailIfNotExist">
            <summary>
            If <c>true</c> task fails with exception if application pool doesn't exists. Otherwise not.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateAppPoolTask.UseClassicManagedPipelineMode">
            <summary>
            Classic managed pipelinemode will be used instead of integrated managed pipelinemode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateAppPoolTask.ManagedRuntimeVersion(System.String)">
            <summary>
            Set the Managed runtime version(.net CLR version). By default latest is used.
            </summary>
            <param name="managedRuntimeVersion"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.WebsiteName(System.String)">
            <summary>
            set the web site name.
            </summary>
            <param name="siteName">The web site name.</param>
            <returns>The <see cref="T:FlubuCore.Tasks.Iis.CreateWebsiteTask.CreateWebsiteBindingProtocol"/> instance.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.WebsiteMode(FlubuCore.Tasks.Iis.CreateWebApplicationMode)">
            <summary>
            Set Website mode.
            </summary>
            <param name="value">The website Mode <see cref="T:FlubuCore.Tasks.Iis.CreateWebApplicationMode"/> </param>
            <returns>The Iis7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.ApplicationPoolName(System.String)">
            <summary>
            Set web site application pool name.
            </summary>
            <param name="applicationPool">The application pool name</param>
            <returns>The  Iis7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.ICreateWebsiteTask.AddMimeType(FlubuCore.Tasks.Iis.MimeType)">
            <summary>
             Add MimeType. Can be used multiple times.
            </summary>
            <param name="mimeType">The mime type</param>
            <returns>The  Iis7CreateWebSiteTask.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Iis.IDeleteAppPoolTask.FailIfNotExist">
            <summary>
            task fails with exception if application pool doesn't exists. Otherwise not.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Iis.MimeType.FileExtension">
            <summary>
            Gets or sets File extension of the mime type.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Iis.MimeType.MimeTypeName">
            <summary>
            Gets or sets The Mime type.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.ITask.ExecuteVoid(FlubuCore.Context.ITaskContext)">
            <summary>
                Executes the task using the specified script execution environment.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="T:FlubuCore.Tasks.ITaskOfT`1">
            <summary>
                Specifies basic properties and methods for a task.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`1.Execute(FlubuCore.Context.ITaskContext)">
            <summary>
                Executes the task using the specified script execution environment.
            </summary>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`1.DoNotFailOnError">
            <summary>
            Task won't fail if error occurs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.ITaskOfT`1.Retry(System.Int32,System.Int32)">
            <summary>
            Retry task if execution of the task fails.
            </summary>
            <param name="numberOfRetries">Number of retries before task fails.</param>
            <param name="delay">Delay time in miliseconds between retries.</param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.NetCore.DotnetBuildTask">
            <summary>
            Publishes a .NET project for deployment (including the runtime).
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.Project(System.String)">
            <summary>
            The MSBuild project file to build. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.AddRuntime(System.String)">
            <summary>
            Target runtime to build for. The default is to build a portable application.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.NoIncrementail">
            <summary>
             Disables incremental build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetBuildTask.NoDependencies">
            <summary>
             Set this flag to ignore project to project references and only restore the root project
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.Project(System.String)">
            <summary>
            The MSBuild project file to publish. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.Framework(System.String)">
            <summary>
            Clean a specific framework.
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetCleanTask.Configuration(System.String)">
            <summary>
            Clean a specific configuration.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.#ctor(System.String)">
            <summary>
            Pushes the nuget package to nuget server.
            </summary>
            <param name="packagePath">Path to nupkg</param>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.ServerUrl(System.String)">
            <summary>
             Specifies the server URL
            </summary>
            <param name="serverUrl"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.SymbolServerUrl(System.String)">
            <summary>
             Specifies the symbol server URL. If not specified, nuget.smbsrc.net is used when pushing to nuget.org.
            </summary>
            <param name="symbolServerUrl"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.ApiKey(System.String)">
            <summary>
            The API key for the server.
            </summary>
            <param name="apiKey"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.SymbolApiKey(System.String)">
            <summary>
            The API key for the symbol server.
            </summary>
            <param name="symbolApyKey"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetNugetPushTask.Timeout(System.Int32)">
            <summary>
            Specifies the timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes). Specifying 0 (zero seconds) applies the default value.
            </summary>
            <param name="timeoutInSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Project(System.String)">
            <summary>
            The project to pack, defaults to the project file in the current directory. Can be a path to any project file
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.OutputDirectory(System.String)">
            <summary>
            Directory in which to place built packages.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.IncludeSymbols">
            <summary>
            Include packages with symbols in addition to regular packages in output directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.IncludeSource">
            <summary>
            Include PDBs and source files. Source files go into the src folder in the resulting nuget package.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.VersionSufix(System.String)">
            <summary>
             Defines the value for the $(VersionSuffix) property in the project.
            </summary>
            <param name="versionSufix"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.NoBuild">
            <summary>
             Skip building the project prior to packing. By default, the project will be built.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPackTask.Servicable">
            <summary>
            Set the serviceable flag in the package. For more information, please see https://aka.ms/nupkgservicing.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.NetCore.DotnetPublishTask">
            <summary>
            Publishes a .NET project for deployment (including the runtime).
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Project(System.String)">
            <summary>
            The MSBuild project file to publish. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Framework(System.String)">
            <summary>
            Target framework to publish for. The target framework has to be specified in the project file.
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.AddRuntime(System.String)">
            <summary>
            Target runtime to publish for. The default is to build a portable application.
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.OutputDirectory(System.String)">
            <summary>
            Output directory in which to place the published artifacts.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetPublishTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.AddNugetSouce(System.String)">
            <summary>
            Add a NuGet package source to use during the restore.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.AddRuntime(System.String)">
            <summary>
            
            </summary>
            <param name="runtime"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.PackagesDirectory(System.String)">
            <summary>
            Directory to install packages in.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.DisableParallel">
            <summary>
            Disables restoring multiple projects in parallel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.NugetConfigFile(System.String)">
            <summary>
            
            </summary>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.NoCache">
            <summary>
            Do not cache packages and http requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.IgnoreFailedSources">
            <summary>
            Treat package source failures as warnings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetRestoreTask.NoDependencies">
            <summary>
             Set this flag to ignore project to project references and only restore the root project
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.Project(System.String)">
            <summary>
            The MSBuild project file to publish. If a project file is not specified, MSBuild searches the current working directory for a file that has a file extension that ends in `proj` and uses that file.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.Framework(System.String)">
            <summary>
            Looks for test binaries for a specific framework
            </summary>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.OutputDirectory(System.String)">
            <summary>
            Directory in which to find the binaries to be run
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.SetSettingFileToUse(System.String)">
            <summary>
            Settings to use when running tests.
            </summary>
            <param name="settingFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.SetTestAdapterPath(System.String)">
            <summary>
            Use custom adapters from the given path in the test run.
            </summary>
            <param name="pathToAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.AddFilter(System.String)">
            <summary>
            Run tests that match the given expression.
            Examples:
            Run tests with priority set to 1: --filter "Priority = 1"
            Run a test with the specified full name: --filter "FullyQualifiedName=Namespace.ClassName.MethodName"
            Run tests that contain the specified name: --filter "FullyQualifiedName~Namespace.Class"
            More info on filtering support: https://aka.ms/vstest-filtering
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.Configuration(System.String)">
            <summary>
            Configuration to use for building the project. Default for most projects is  "Debug".
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.VerboseLogs(System.String)">
            <summary>
            Enable verbose logs for test platform. Logs are written to the provided file.
            </summary>
            <param name="pathToFile"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.DotnetTestTask.NoBuild">
            <summary>
            Do not build project before testing.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlubuCore.Tasks.NetCore.ExecuteDotnetTask.Command">
            <summary>
            Dotnet command to be executed.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.ExecuteDotnetTask.WithArguments(System.String)">
            <summary>
            Add's Argument to the dotnet see <c>Command</c>
            </summary>
            <param name="arg">Argument to be added</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.ExecuteDotnetTask.WithArguments(System.String[])">
            <summary>
            Add's Arguments to the dotnet see <c>Command</c>
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.ExecuteDotnetTask.WorkingFolder(System.String)">
            <summary>
            Working folder of the dotnet command
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.NetCore.ExecuteDotnetTask.DotnetExecutable(System.String)">
            <summary>
            Path to the dotnet executable.
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.NuGetVerbosity">
            <summary>
            Verbosity
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.ApiKey">
            <summary>
            The API key for the server
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.ExecutablePath">
            <summary>
            Path to the nuget.exe
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.AddArgument(System.String)">
            <summary>
            Add's argument to the nuget.exe 
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.NuGetCmdLineTask.NuGetPath(System.String)">
            <summary>
            Path to the nuget.exe
            </summary>
            <param name="fullFilePath"></param>
            <returns></returns>
        </member>
        <member name="P:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.BasePath">
            <summary>
            nuget base path argument to be added.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.NugetServerUrl(System.String)">
            <summary>
            Nuget server url package will be pushed to.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.ForApiKeyUse(System.String)">
            <summary>
            Nuget server Api key.
            </summary>
            <param name="apiKey"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.ForApiKeyUseEnvironmentVariable(System.String)">
            <summary>
            Name of the enviroment variable to use to get api key. 
            </summary>
            <param name="variableName"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Nuget.PublishNuGetPackageTask.ForApiKeyUseFile(System.String)">
            <summary>
            Path to the file that contains api key.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.AddDirectoryToPackage(System.String,System.String,System.Boolean)">
            <summary>
            Add's specified directory to the package.
            </summary>
            <param name="sourceDirectoryPath">Path of the source directory to be copied.</param>
            <param name="destinationDirectory">Name of the directory that the source directory will be copied to.</param>
            <param name="recursive">If <c>true</c> subfolders in the source directory are also added. Otherwise not.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.AddDirectoryToPackage(System.String,System.String,System.Boolean,FlubuCore.Packaging.IFileFilter[])">
            <summary>
            Add's directory to the package.
            </summary>
            <param name="sourceDirectoryPath">Path of the source directory to be copied.</param>
            <param name="destinationDirectory">Name of the directory that the source directory will be copied to.</param>
            <param name="recursive">If <c>true</c> subfolders in the source directory are also added. Otherwise not.</param>
            
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.AddFileToPackage(System.String,System.String)">
            <summary>
            Adds file to the package
            </summary>
            <param name="sourceFilePath">Path of the tile to be added to the package.</param>
            <param name="destinationDirectory">Name of the directory that the source file will be copied to.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.OptimizeZip">
            <summary>
            If <c>true</c> zip is optimized by removing duplicated files. When unziped those files are copied to original locations. 
            For unziping Unzip task has to be ussed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.DisableLogging">
            <summary>
            Disables logging of filtered out files and files to be coppied / zipped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Packaging.PackageTask.ZipPackage(System.String,System.Boolean,System.Int32)">
            <summary>
            Zip't the package
            </summary>
            <param name="zipFileName">File name of the zip package.</param>
            <param name="addVersionPostfix">if <c>true</c> build version number is added to zip file as postfix</param>
            <param name="versionFeildCount">Number of version fields to be added.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.WithArguments(System.String)">
            <summary>
            Add's argument to the program.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.WithArguments(System.String[])">
            <summary>
            Add's arguments to the program.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Process.RunProgramTask.WorkingFolder(System.String)">
            <summary>
            Working folder of the program.
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.CompileSolutionTask">
            <summary>
            Task compiles solution with MsBuild.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.#ctor(FlubuCore.Services.IFlubuEnviromentService)">
            <summary>
            Task compiles specified solution with MSBuild.
            </summary>
            <param name="enviromentService"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.#ctor(System.String,System.String,FlubuCore.Services.IFlubuEnviromentService)">
            <summary>
            Task compiles specified solution with MSBuild.
            </summary>
            <param name="buildConfiguration"></param>
            <param name="enviromentService"></param>
            <param name="solutionFileName"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.AddArgument(System.String)">
            <summary>
            Add's argument to MSBuild.
            </summary>
            <param name="argument">Argument to be added</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.Platform(System.String)">
            <summary>
            Add's Platform argument to MSBuild. If not set CPUAny is used as default.
            </summary>
            <param name="platform">The platform.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.CompileSolutionTask.AddMsBuildPath(System.String)">
            <summary>
            Add location to msbuild. Full msbuild.exe file location must be specified. If msbuild is found at specified location msbuild wild not be searched at default locations it will use one specified here.
            If more than 1 path is specified first msbuild occurrence will be used. Otherwise if it is not found it will search for it in default locations.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.CompileSolutionTask.Target">
            <summary>
            Add'sTarget argument to MSBuild. 
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.CompileSolutionTask.ToolsVersion">
            <summary>
            Msbuild version to be used for build.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.LoadSolutionTask.#ctor">
            <summary>
            Task load's solution to <see cref="T:FlubuCore.Context.TaskContextSession"/> solution file name is retieved from <see cref="T:FlubuCore.Context.TaskContextSession"/>
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject">
            <summary>
            Represents a VisualStudio project.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Configurations">
            <summary>
            Gets a read-only collection of project configurations.
            </summary>
            <value>A read-only collection of project configurations.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Items">
            <summary>
            Gets a read-only collection of all .cs files in the solution.
            </summary>
            <value>A read-only collection of all the .cs files in the solution.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Properties">
            <summary>
            Gets a read-only collection of project properties.
            </summary>
            <value>A read-only collection of project properties.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.Load(System.String)">
            <summary>
            Loads the specified project file name.
            </summary>
            <param name="projectFileName">Name of the project file.</param>
            <returns>VSProject class containing project information.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.FindConfiguration(System.String)">
            <summary>
            Finds the VisualStudio project configuration specified by a condition.
            </summary>
            <param name="condition">The condition which identifies the configuration
             (example: " '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ").</param>
            <returns><see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectConfiguration"/> object if found; <c>null</c> if no configuration was found that meets the
            specified condition.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject.GetSingleTypeItems(System.String)">
            <summary>
            Gets the List of VSProjectItem single type items.
            </summary>
            <param name="getItemType">Type of the item.</param>
            <returns>List of items of specific itemType.</returns>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectConfiguration">
            <summary>
            Contains information of compile configuration.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectItem">
            <summary>
            Holds information about content items inside of a VisualStudio project.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType">
            <summary>
            Contains information about a specific VisualStudio project type.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> class.
            </summary>
            <param name="projectTypeGuid">The project type GUID.</param>
            <param name="projectTypeName">Name of the project type.</param>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.CSharpProjectType">
            <summary>
            Gets the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for C# projects.
            </summary>
            <value>The <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for C# projects.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.SolutionFolderProjectType">
            <summary>
            Gets the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for solution folders.
            </summary>
            <value>The <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> for solution folders.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.ProjectTypeGuid">
            <summary>
            Gets the project type GUID.
            </summary>
            <value>The project type GUID.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.ProjectTypeName">
            <summary>
            Gets the name of the project type.
            </summary>
            <value>The name of the project type.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.op_Equality(FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType,FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.op_Inequality(FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType,FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Compares the two objects.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.Equals(FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
                An object to compare with this object.
            </param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectTypesDictionary">
            <summary>
            A dictionary of registered VisualStudio project types.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectTypesDictionary.RegisterProjectType(FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType)">
            <summary>
            Registers a new type of the VisualStudio project.
            </summary>
            <param name="projectType">><see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> object to be registered.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectTypesDictionary.FindProjectType(System.Guid)">
            <summary>
            Tries to find <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> object for a specific VisualStudio project type Guid.
            </summary>
            <param name="projectTypeGuid">The project type GUID.</param>
            <returns><see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectType"/> object holding information about the specified VisualStudio project
            type; <c>null</c> if the project type is not registered.</returns>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo">
            <summary>
            Holds information about a VisualStudio project.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.Project">
            <summary>
            Gets or sets the <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject"/> object holding the detailed information about this VisualStudio
            project.
            </summary>
            <value>The <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProject"/> object .</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectDirectoryPath">
            <summary>
            Gets the path to the directory where the project file is located.
            </summary>
            <value>The project directory path.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileName">
            <summary>
            Gets the name of the project file. The file name is relative to the solution's directory.
            </summary>
            <remarks>The full path to the project file can be retrieved using the <see cref="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull"/>
            property.</remarks>
            <value>The name of the project file.</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.ProjectFileNameFull">
            <summary>
            Gets the full path to the project file.
            </summary>
            <value>The full path to the project file.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.GetProjectOutputPath(System.String)">
            <summary>
            Gets the output path for a specified VisualStudio project. The output path is relative
            to the directory where the project file is located.
            </summary>
            <param name="buildConfiguration">The build configuration.</param>
            <returns>
            The output path or <c>null</c> if the project is not compatible.
            </returns>
            <exception cref="T:System.ArgumentException">The method could not extract the data from the project file.</exception>
        </member>
        <member name="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution">
            <summary>
            Represents a VisualStudio solution.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.Projects">
            <summary>
            Gets a read-only collection of <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects for all of the projects in the solution.
            </summary>
            <value>A read-only collection of <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo"/> objects .</value>
        </member>
        <member name="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.ProjectTypesDictionary">
            <summary>
            Gets or sets the VisualStudio project types dictionary.
            </summary>
            <value>The VisualStudio project types dictionary.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.Load(System.String)">
            <summary>
            Loads the specified VisualStudio solution file and returns a <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution"/> representing the solution.
            </summary>
            <param name="fileName">The name of the solution file.</param>
            <returns>A <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution"/> representing the solution.</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.FindProjectById(System.Guid)">
            <summary>
            Finds the project by its unique id.
            </summary>
            <param name="projectGuid">The project's GUID.</param>
            <returns>The <see cref="T:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo"/> object representing the project.</returns>
            <exception cref="T:System.ArgumentException">The project was not found.</exception>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.ForEachProject(System.Action{FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectInfo})">
            <summary>
            Performs the specified action on each project of the solution.
            </summary>
            <param name="action">The action delegate to perform on each project.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSSolution.LoadProjects">
            <summary>
            Loads the VisualStudio project files and fills the project data into <see cref="P:FlubuCore.Tasks.Solution.VSSolutionBrowsing.VSProjectWithFileInfo.Project"/>
            properties for each of the project in the solution.
            </summary>
        </member>
        <member name="T:FlubuCore.Tasks.TaskBase`1">
            <summary>
                A base abstract class from which tasks can be implemented.
            </summary>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`1.IsSafeToExecuteInDryRun">
            <summary>
                Gets a value indicating whether this instance is safe to execute in dry run mode.
            </summary>
            <value>
                <c>true</c> if this instance is safe to execute in dry run mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FlubuCore.Tasks.TaskBase`1.LogDuration">
            <summary>
                Gets a value indicating whether the duration of the task should be logged after the task
                has finished.
            </summary>
            <value><c>true</c> if duration should be logged; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`1.Retry(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="numberOfRetries">Number of retries before task fails.</param>
            <param name="delay">Delay time in miliseconds between retries.</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`1.Execute(FlubuCore.Context.ITaskContext)">
            <summary>
                Executes the task using the specified script execution environment.
            </summary>
            <remarks>
                This method implements the basic reporting and error handling for
                classes which inherit the <see>
                    <cref>TaskBase</cref>
                </see>
                class.
            </remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`1.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
                Abstract method defining the actual work for a task.
            </summary>
            <remarks>This method has to be implemented by the inheriting task.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="M:FlubuCore.Tasks.TaskBase`1.DoExecuteAsync(FlubuCore.Context.ITaskContextInternal)">
            <summary>
            Virtual method defining the actual work for a task.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Testing.NUnitTask">
            <inheritdoc />
            <summary>
            Run NUnit tests with NUnit console runner.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NUnitTask._workingDirectory">
            <summary>
            unit test working directory.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NUnitTask._categories">
            <summary>
             test categories that will be included/excluded in tests.
            </summary>
        </member>
        <member name="F:FlubuCore.Tasks.Testing.NUnitTask._targetFramework">
            <summary>
            .NET framework NUnit console should run under.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Testing.NUnitTask"/> class.
            </summary>
            <param name="nunitConsoleFileName">full file path to nunit console</param>
            <param name="projectNames">Unit test project name.</param>
        </member>
        <member name="P:FlubuCore.Tasks.Testing.NUnitTask.TestAssemblyFileNames">
            <summary>
            Gets a list of assemblies to be tested
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.ForNunitV2(System.String[])">
            <summary>
            Initializes NunitTask with default command line options for nunit V2.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.ForNunitV3(System.String[])">
            <summary>
            Initializes NunitTask with default command line options for nunit V3.
            </summary>
            <param name="projectName">Unit test project name.</param>
            <returns>New instance of nunit task</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.ExcludeCategory(System.String)">
            <summary>
            Excludes category from test. Can be ussed multiple times. Supported only in nunit v3 and above. For v2 use <see cref="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="category">The Categorie to be excluded</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.IncludeCategory(System.String)">
            <summary>
            Include category in test. Can be ussed multiple times. Supported only in nunit v3 and above. For v2 use <see cref="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="category">The category to be included</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.SetTargetFramework(System.String)">
            <summary>
            Sets the .NET framework NUnit console should run under. Supported only in nunit v3 and above. For v2 use <see cref="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)"/>
            </summary>
            <param name="framework">Targeted .net framework</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.AddNunitCommandLineOption(System.String)">
            <summary>
             Add nunit command line option. Can be used multiple times.
            </summary>
            <param name="nunitCmdOption">nunit command line option to be added.</param>
            <returns>The NunitTask</returns>
        </member>
        <member name="M:FlubuCore.Tasks.Testing.NUnitTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <inheritdoc />
            <summary>
            Abstract method defining the actual work for a task.
            </summary>
            <remarks>This method has to be implemented by the inheriting task.</remarks>
            <param name="context">The script execution environment.</param>
        </member>
        <member name="P:FlubuCore.Tasks.Text.ReplaceTokensTask.Description">
            <summary>
            Gets the task description.
            </summary>
            <value>The task description.</value>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Output(System.String)">
            <summary>
            Set the fileName of the new json file. If not set same file is updated.
            </summary>
            <param name="fullFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.String)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Int32)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Int64)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Double)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.Decimal)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.String,System.DateTime)">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.Update(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JValue}[])">
            <summary>
             Updates json property/element with specified value,
            </summary>
            <param name="path">Json path to the element to be updated</param>
            <param name="value">New value of the json element</param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateJsonFileTask.FailIfPropertyNotFound(System.Boolean)">
            <summary>
            If <c>true</c> task fails with exception if any of the properties to be updated are not found.
            </summary>
            <param name="fail"></param>
            <returns></returns>
        </member>
        <member name="T:FlubuCore.Tasks.Text.UpdateXmlFileTask">
            <summary>
            Updates an XML file using the specified update commands.
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlubuCore.Tasks.Text.UpdateXmlFileTask"/> class with
            the specified XML file to be updated.
            </summary>
            <param name="fileName">The fileName of the XML file.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.UpdatePath(System.String,System.String)">
            <summary>
            Adds an "update" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be updated.</param>
            <param name="value">New value of the selected nodes.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.DeletePath(System.String)">
            <summary>
            Adds an "delete" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="xpath">XPath for the nodes which should be deleted.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddOrUpdate(System.String,System.String)">
            <summary>
            Adds an "add or update" command to the list of commands to be performed on the XML file. Depending on if the xml element exists or not.
            </summary>
            <param name="xpath"></param>
            <param name="value"></param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String,System.String)">
            <summary>
            Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
            <param name="value">The value for the new child node.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String)">
            <summary>
            Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.AddPath(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds an "add" command to the list of commands to be performed on the XML file.
            </summary>
            <param name="rootXpath">XPath for the root node on which an addition should be performed.</param>
            <param name="childNodeName">Name of the new child node.</param>
            <param name="attributes">Attributes to be added.</param>
        </member>
        <member name="M:FlubuCore.Tasks.Text.UpdateXmlFileTask.DoExecute(FlubuCore.Context.ITaskContextInternal)">
            <summary>
            Method defining the actual work for a task.
            </summary>
            <param name="context">The script execution environment.</param>
            <returns></returns>
        </member>
        <member name="F:FlubuCore.Tasks.Versioning.FetchBuildVersionFromFileTask._projectVersionFileName">
            <summary>
            File name where project version will be retrived from. If not set default filane is {SolutionName}.ProjectVersion.txt
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.FetchBuildVersionFromFileTask.ProjectVersionFileName(System.String)">
            <summary>
            File name where project version will be retrived from. If not set default filane is {SolutionName}.ProjectVersion.txt
            </summary>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.UpdateNetCoreVersionTask.AdditionalProp(System.String[])">
            <summary>
            Adds additional properties to be updated with the version.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FlubuCore.Tasks.Versioning.UpdateNetCoreVersionTask.AddFiles(System.String[])">
            <summary>
            Adds Project (json/cproj) files to be updated.
            </summary>
            <param name="files"></param>
            <returns></returns>
        </member>
    </members>
</doc>
